### YamlMime:ManagedReference
items:
- uid: PluginAPI.Commands.PluginsCommand
  commentId: T:PluginAPI.Commands.PluginsCommand
  id: PluginsCommand
  parent: PluginAPI.Commands
  children:
  - PluginAPI.Commands.PluginsCommand.Aliases
  - PluginAPI.Commands.PluginsCommand.Command
  - PluginAPI.Commands.PluginsCommand.Create
  - PluginAPI.Commands.PluginsCommand.Description
  - PluginAPI.Commands.PluginsCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  - PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands
  - PluginAPI.Commands.PluginsCommand.Usage
  langs:
  - csharp
  - vb
  name: PluginsCommand
  nameWithType: PluginsCommand
  fullName: PluginAPI.Commands.PluginsCommand
  type: Class
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: PluginsCommand
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 9
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  summary: "\nThe parent command for the NW-API commands.\n"
  example: []
  syntax:
    content: >-
      [CommandHandler(typeof(GameConsoleCommandHandler))]

      public class PluginsCommand : ParentCommand, ICommandHandler, ICommand, IUsageProvider
    content.vb: >-
      <CommandHandler(GetType(GameConsoleCommandHandler))>

      Public Class PluginsCommand
          Inherits ParentCommand
          Implements ICommandHandler, ICommand, IUsageProvider
  inheritance:
  - System.Object
  - CommandSystem.CommandHandler
  - ParentCommand
  implements:
  - CommandSystem.ICommandHandler
  - CommandSystem.ICommand
  - CommandSystem.IUsageProvider
  inheritedMembers:
  - ParentCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  - CommandSystem.CommandHandler.Commands
  - CommandSystem.CommandHandler.CommandAliases
  - CommandSystem.CommandHandler.TryGetCommand(System.String,CommandSystem.ICommand@)
  - CommandSystem.CommandHandler.RegisterCommand(CommandSystem.ICommand)
  - CommandSystem.CommandHandler.UnregisterCommand(CommandSystem.ICommand)
  - CommandSystem.CommandHandler.ClearCommands
  - CommandSystem.CommandHandler.AllCommands
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: CommandSystem.CommandHandlerAttribute
    ctor: CommandSystem.CommandHandlerAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: CommandSystem.GameConsoleCommandHandler
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PluginAPI.Commands.PluginsCommand.Command
  commentId: P:PluginAPI.Commands.PluginsCommand.Command
  id: Command
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: Command
  nameWithType: PluginsCommand.Command
  fullName: PluginAPI.Commands.PluginsCommand.Command
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Command
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 12
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public override string Command { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Command As String
  overridden: ParentCommand.Command
  overload: PluginAPI.Commands.PluginsCommand.Command*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: PluginAPI.Commands.PluginsCommand.Aliases
  commentId: P:PluginAPI.Commands.PluginsCommand.Aliases
  id: Aliases
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: PluginsCommand.Aliases
  fullName: PluginAPI.Commands.PluginsCommand.Aliases
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Aliases
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 13
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public override string[] Aliases { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Overrides ReadOnly Property Aliases As String()
  overridden: ParentCommand.Aliases
  overload: PluginAPI.Commands.PluginsCommand.Aliases*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: PluginAPI.Commands.PluginsCommand.Description
  commentId: P:PluginAPI.Commands.PluginsCommand.Description
  id: Description
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: PluginsCommand.Description
  fullName: PluginAPI.Commands.PluginsCommand.Description
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Description
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 14
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public override string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Description As String
  overridden: ParentCommand.Description
  overload: PluginAPI.Commands.PluginsCommand.Description*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: PluginAPI.Commands.PluginsCommand.Usage
  commentId: P:PluginAPI.Commands.PluginsCommand.Usage
  id: Usage
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: Usage
  nameWithType: PluginsCommand.Usage
  fullName: PluginAPI.Commands.PluginsCommand.Usage
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Usage
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 15
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public string[] Usage { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Usage As String()
  overload: PluginAPI.Commands.PluginsCommand.Usage*
  implements:
  - CommandSystem.IUsageProvider.Usage
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Commands.PluginsCommand.Create
  commentId: M:PluginAPI.Commands.PluginsCommand.Create
  id: Create
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: PluginsCommand.Create()
  fullName: PluginAPI.Commands.PluginsCommand.Create()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Create
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 17
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public static PluginsCommand Create()
    return:
      type: PluginAPI.Commands.PluginsCommand
    content.vb: Public Shared Function Create As PluginsCommand
  overload: PluginAPI.Commands.PluginsCommand.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Commands.PluginsCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  commentId: M:PluginAPI.Commands.PluginsCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  id: ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: ExecuteParent(ArraySegment<String>, ICommandSender, out String)
  nameWithType: PluginsCommand.ExecuteParent(ArraySegment<String>, ICommandSender, out String)
  fullName: PluginAPI.Commands.PluginsCommand.ExecuteParent(System.ArraySegment<System.String>, CommandSystem.ICommandSender, out System.String)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ExecuteParent
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 24
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: protected override bool ExecuteParent(ArraySegment<string> arguments, ICommandSender sender, out string response)
    parameters:
    - id: arguments
      type: System.ArraySegment{System.String}
    - id: sender
      type: CommandSystem.ICommandSender
    - id: response
      type: System.String
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function ExecuteParent(arguments As ArraySegment(Of String), sender As ICommandSender, ByRef response As String) As Boolean
  overridden: ParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  overload: PluginAPI.Commands.PluginsCommand.ExecuteParent*
  nameWithType.vb: PluginsCommand.ExecuteParent(ArraySegment(Of String), ICommandSender, ByRef String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: PluginAPI.Commands.PluginsCommand.ExecuteParent(System.ArraySegment(Of System.String), CommandSystem.ICommandSender, ByRef System.String)
  name.vb: ExecuteParent(ArraySegment(Of String), ICommandSender, ByRef String)
- uid: PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands
  commentId: M:PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands
  id: LoadGeneratedCommands
  parent: PluginAPI.Commands.PluginsCommand
  langs:
  - csharp
  - vb
  name: LoadGeneratedCommands()
  nameWithType: PluginsCommand.LoadGeneratedCommands()
  fullName: PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Commands/PluginsCommand.cs
      branch: dev
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: LoadGeneratedCommands
    path: ../NwPluginAPI/Commands/PluginsCommand.cs
    startLine: 30
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public override void LoadGeneratedCommands()
    content.vb: Public Overrides Sub LoadGeneratedCommands
  overridden: CommandSystem.CommandHandler.LoadGeneratedCommands
  overload: PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: PluginAPI.Commands
  commentId: N:PluginAPI.Commands
  name: PluginAPI.Commands
  nameWithType: PluginAPI.Commands
  fullName: PluginAPI.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CommandSystem.CommandHandler
  commentId: T:CommandSystem.CommandHandler
  parent: CommandSystem
  isExternal: true
  name: CommandHandler
  nameWithType: CommandHandler
  fullName: CommandSystem.CommandHandler
- uid: ParentCommand
  commentId: T:ParentCommand
  isExternal: true
  name: ParentCommand
  nameWithType: ParentCommand
  fullName: ParentCommand
- uid: CommandSystem.ICommandHandler
  commentId: T:CommandSystem.ICommandHandler
  parent: CommandSystem
  isExternal: true
  name: ICommandHandler
  nameWithType: ICommandHandler
  fullName: CommandSystem.ICommandHandler
- uid: CommandSystem.ICommand
  commentId: T:CommandSystem.ICommand
  parent: CommandSystem
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: CommandSystem.ICommand
- uid: CommandSystem.IUsageProvider
  commentId: T:CommandSystem.IUsageProvider
  parent: CommandSystem
  isExternal: true
  name: IUsageProvider
  nameWithType: IUsageProvider
  fullName: CommandSystem.IUsageProvider
- uid: ParentCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  commentId: M:ParentCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  parent: ParentCommand
  isExternal: true
  name: Execute(ArraySegment<String>, ICommandSender, String)
  nameWithType: ParentCommand.Execute(ArraySegment<String>, ICommandSender, String)
  fullName: ParentCommand.Execute(System.ArraySegment<System.String>, CommandSystem.ICommandSender, System.String)
  nameWithType.vb: ParentCommand.Execute(ArraySegment(Of String), ICommandSender, String)
  fullName.vb: ParentCommand.Execute(System.ArraySegment(Of System.String), CommandSystem.ICommandSender, System.String)
  name.vb: Execute(ArraySegment(Of String), ICommandSender, String)
  spec.csharp:
  - uid: ParentCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
    name: Execute
    nameWithType: ParentCommand.Execute
    fullName: ParentCommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommandSender
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: CommandSystem.ICommandSender
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ParentCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
    name: Execute
    nameWithType: ParentCommand.Execute
    fullName: ParentCommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommandSender
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: CommandSystem.ICommandSender
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.CommandHandler.Commands
  commentId: F:CommandSystem.CommandHandler.Commands
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: Commands
  nameWithType: CommandHandler.Commands
  fullName: CommandSystem.CommandHandler.Commands
- uid: CommandSystem.CommandHandler.CommandAliases
  commentId: F:CommandSystem.CommandHandler.CommandAliases
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: CommandAliases
  nameWithType: CommandHandler.CommandAliases
  fullName: CommandSystem.CommandHandler.CommandAliases
- uid: CommandSystem.CommandHandler.TryGetCommand(System.String,CommandSystem.ICommand@)
  commentId: M:CommandSystem.CommandHandler.TryGetCommand(System.String,CommandSystem.ICommand@)
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: TryGetCommand(String, ICommand)
  nameWithType: CommandHandler.TryGetCommand(String, ICommand)
  fullName: CommandSystem.CommandHandler.TryGetCommand(System.String, CommandSystem.ICommand)
  spec.csharp:
  - uid: CommandSystem.CommandHandler.TryGetCommand(System.String,CommandSystem.ICommand@)
    name: TryGetCommand
    nameWithType: CommandHandler.TryGetCommand
    fullName: CommandSystem.CommandHandler.TryGetCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommand
    name: ICommand
    nameWithType: ICommand
    fullName: CommandSystem.ICommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CommandSystem.CommandHandler.TryGetCommand(System.String,CommandSystem.ICommand@)
    name: TryGetCommand
    nameWithType: CommandHandler.TryGetCommand
    fullName: CommandSystem.CommandHandler.TryGetCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommand
    name: ICommand
    nameWithType: ICommand
    fullName: CommandSystem.ICommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.CommandHandler.RegisterCommand(CommandSystem.ICommand)
  commentId: M:CommandSystem.CommandHandler.RegisterCommand(CommandSystem.ICommand)
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: RegisterCommand(ICommand)
  nameWithType: CommandHandler.RegisterCommand(ICommand)
  fullName: CommandSystem.CommandHandler.RegisterCommand(CommandSystem.ICommand)
  spec.csharp:
  - uid: CommandSystem.CommandHandler.RegisterCommand(CommandSystem.ICommand)
    name: RegisterCommand
    nameWithType: CommandHandler.RegisterCommand
    fullName: CommandSystem.CommandHandler.RegisterCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CommandSystem.ICommand
    name: ICommand
    nameWithType: ICommand
    fullName: CommandSystem.ICommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CommandSystem.CommandHandler.RegisterCommand(CommandSystem.ICommand)
    name: RegisterCommand
    nameWithType: CommandHandler.RegisterCommand
    fullName: CommandSystem.CommandHandler.RegisterCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CommandSystem.ICommand
    name: ICommand
    nameWithType: ICommand
    fullName: CommandSystem.ICommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.CommandHandler.UnregisterCommand(CommandSystem.ICommand)
  commentId: M:CommandSystem.CommandHandler.UnregisterCommand(CommandSystem.ICommand)
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: UnregisterCommand(ICommand)
  nameWithType: CommandHandler.UnregisterCommand(ICommand)
  fullName: CommandSystem.CommandHandler.UnregisterCommand(CommandSystem.ICommand)
  spec.csharp:
  - uid: CommandSystem.CommandHandler.UnregisterCommand(CommandSystem.ICommand)
    name: UnregisterCommand
    nameWithType: CommandHandler.UnregisterCommand
    fullName: CommandSystem.CommandHandler.UnregisterCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CommandSystem.ICommand
    name: ICommand
    nameWithType: ICommand
    fullName: CommandSystem.ICommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CommandSystem.CommandHandler.UnregisterCommand(CommandSystem.ICommand)
    name: UnregisterCommand
    nameWithType: CommandHandler.UnregisterCommand
    fullName: CommandSystem.CommandHandler.UnregisterCommand
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CommandSystem.ICommand
    name: ICommand
    nameWithType: ICommand
    fullName: CommandSystem.ICommand
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.CommandHandler.ClearCommands
  commentId: M:CommandSystem.CommandHandler.ClearCommands
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: ClearCommands()
  nameWithType: CommandHandler.ClearCommands()
  fullName: CommandSystem.CommandHandler.ClearCommands()
  spec.csharp:
  - uid: CommandSystem.CommandHandler.ClearCommands
    name: ClearCommands
    nameWithType: CommandHandler.ClearCommands
    fullName: CommandSystem.CommandHandler.ClearCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CommandSystem.CommandHandler.ClearCommands
    name: ClearCommands
    nameWithType: CommandHandler.ClearCommands
    fullName: CommandSystem.CommandHandler.ClearCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.CommandHandler.AllCommands
  commentId: P:CommandSystem.CommandHandler.AllCommands
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: AllCommands
  nameWithType: CommandHandler.AllCommands
  fullName: CommandSystem.CommandHandler.AllCommands
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CommandSystem
  commentId: N:CommandSystem
  isExternal: true
  name: CommandSystem
  nameWithType: CommandSystem
  fullName: CommandSystem
- uid: ParentCommand.Command
  commentId: P:ParentCommand.Command
  parent: ParentCommand
  isExternal: true
  name: Command
  nameWithType: ParentCommand.Command
  fullName: ParentCommand.Command
- uid: PluginAPI.Commands.PluginsCommand.Command*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.Command
  name: Command
  nameWithType: PluginsCommand.Command
  fullName: PluginAPI.Commands.PluginsCommand.Command
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ParentCommand.Aliases
  commentId: P:ParentCommand.Aliases
  parent: ParentCommand
  isExternal: true
  name: Aliases
  nameWithType: ParentCommand.Aliases
  fullName: ParentCommand.Aliases
- uid: PluginAPI.Commands.PluginsCommand.Aliases*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.Aliases
  name: Aliases
  nameWithType: PluginsCommand.Aliases
  fullName: PluginAPI.Commands.PluginsCommand.Aliases
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ParentCommand.Description
  commentId: P:ParentCommand.Description
  parent: ParentCommand
  isExternal: true
  name: Description
  nameWithType: ParentCommand.Description
  fullName: ParentCommand.Description
- uid: PluginAPI.Commands.PluginsCommand.Description*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.Description
  name: Description
  nameWithType: PluginsCommand.Description
  fullName: PluginAPI.Commands.PluginsCommand.Description
- uid: PluginAPI.Commands.PluginsCommand.Usage*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.Usage
  name: Usage
  nameWithType: PluginsCommand.Usage
  fullName: PluginAPI.Commands.PluginsCommand.Usage
- uid: CommandSystem.IUsageProvider.Usage
  commentId: P:CommandSystem.IUsageProvider.Usage
  parent: CommandSystem.IUsageProvider
  isExternal: true
  name: Usage
  nameWithType: IUsageProvider.Usage
  fullName: CommandSystem.IUsageProvider.Usage
- uid: PluginAPI.Commands.PluginsCommand.Create*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.Create
  name: Create
  nameWithType: PluginsCommand.Create
  fullName: PluginAPI.Commands.PluginsCommand.Create
- uid: PluginAPI.Commands.PluginsCommand
  commentId: T:PluginAPI.Commands.PluginsCommand
  parent: PluginAPI.Commands
  name: PluginsCommand
  nameWithType: PluginsCommand
  fullName: PluginAPI.Commands.PluginsCommand
- uid: ParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  commentId: M:ParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  parent: ParentCommand
  isExternal: true
  name: ExecuteParent(ArraySegment<String>, ICommandSender, String)
  nameWithType: ParentCommand.ExecuteParent(ArraySegment<String>, ICommandSender, String)
  fullName: ParentCommand.ExecuteParent(System.ArraySegment<System.String>, CommandSystem.ICommandSender, System.String)
  nameWithType.vb: ParentCommand.ExecuteParent(ArraySegment(Of String), ICommandSender, String)
  fullName.vb: ParentCommand.ExecuteParent(System.ArraySegment(Of System.String), CommandSystem.ICommandSender, System.String)
  name.vb: ExecuteParent(ArraySegment(Of String), ICommandSender, String)
  spec.csharp:
  - uid: ParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
    name: ExecuteParent
    nameWithType: ParentCommand.ExecuteParent
    fullName: ParentCommand.ExecuteParent
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommandSender
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: CommandSystem.ICommandSender
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ParentCommand.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
    name: ExecuteParent
    nameWithType: ParentCommand.ExecuteParent
    fullName: ParentCommand.ExecuteParent
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommandSender
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: CommandSystem.ICommandSender
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Commands.PluginsCommand.ExecuteParent*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.ExecuteParent
  name: ExecuteParent
  nameWithType: PluginsCommand.ExecuteParent
  fullName: PluginAPI.Commands.PluginsCommand.ExecuteParent
- uid: System.ArraySegment{System.String}
  commentId: T:System.ArraySegment{System.String}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<String>
  nameWithType: ArraySegment<String>
  fullName: System.ArraySegment<System.String>
  nameWithType.vb: ArraySegment(Of String)
  fullName.vb: System.ArraySegment(Of System.String)
  name.vb: ArraySegment(Of String)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.ICommandSender
  commentId: T:CommandSystem.ICommandSender
  parent: CommandSystem
  isExternal: true
  name: ICommandSender
  nameWithType: ICommandSender
  fullName: CommandSystem.ICommandSender
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.CommandHandler.LoadGeneratedCommands
  commentId: M:CommandSystem.CommandHandler.LoadGeneratedCommands
  parent: CommandSystem.CommandHandler
  isExternal: true
  name: LoadGeneratedCommands()
  nameWithType: CommandHandler.LoadGeneratedCommands()
  fullName: CommandSystem.CommandHandler.LoadGeneratedCommands()
  spec.csharp:
  - uid: CommandSystem.CommandHandler.LoadGeneratedCommands
    name: LoadGeneratedCommands
    nameWithType: CommandHandler.LoadGeneratedCommands
    fullName: CommandSystem.CommandHandler.LoadGeneratedCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CommandSystem.CommandHandler.LoadGeneratedCommands
    name: LoadGeneratedCommands
    nameWithType: CommandHandler.LoadGeneratedCommands
    fullName: CommandSystem.CommandHandler.LoadGeneratedCommands
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands*
  commentId: Overload:PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands
  name: LoadGeneratedCommands
  nameWithType: PluginsCommand.LoadGeneratedCommands
  fullName: PluginAPI.Commands.PluginsCommand.LoadGeneratedCommands
