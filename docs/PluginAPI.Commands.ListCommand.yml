### YamlMime:ManagedReference
items:
- uid: PluginAPI.Commands.ListCommand
  commentId: T:PluginAPI.Commands.ListCommand
  id: ListCommand
  parent: PluginAPI.Commands
  children:
  - PluginAPI.Commands.ListCommand.Aliases
  - PluginAPI.Commands.ListCommand.Command
  - PluginAPI.Commands.ListCommand.Description
  - PluginAPI.Commands.ListCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  langs:
  - csharp
  - vb
  name: ListCommand
  nameWithType: ListCommand
  fullName: PluginAPI.Commands.ListCommand
  type: Class
  source:
    remote:
      path: NwPluginAPI/Commands/ListCommand.cs
      branch: master
      repo: git@github.com:northwood-studios/NwPluginAPI.git
    id: ListCommand
    path: ../NwPluginAPI/Commands/ListCommand.cs
    startLine: 10
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  summary: "\nLists all plugins on the server.\n"
  example: []
  syntax:
    content: >-
      [CommandHandler(typeof(PluginsCommand))]

      public class ListCommand : ICommand
    content.vb: >-
      <CommandHandler(GetType(PluginsCommand))>

      Public Class ListCommand
          Implements ICommand
  inheritance:
  - System.Object
  implements:
  - CommandSystem.ICommand
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: CommandSystem.CommandHandlerAttribute
    ctor: CommandSystem.CommandHandlerAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: PluginAPI.Commands.PluginsCommand
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PluginAPI.Commands.ListCommand.Command
  commentId: P:PluginAPI.Commands.ListCommand.Command
  id: Command
  parent: PluginAPI.Commands.ListCommand
  langs:
  - csharp
  - vb
  name: Command
  nameWithType: ListCommand.Command
  fullName: PluginAPI.Commands.ListCommand.Command
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/ListCommand.cs
      branch: master
      repo: git@github.com:northwood-studios/NwPluginAPI.git
    id: Command
    path: ../NwPluginAPI/Commands/ListCommand.cs
    startLine: 14
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  example: []
  syntax:
    content: public string Command { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Command As String
  overload: PluginAPI.Commands.ListCommand.Command*
  implements:
  - CommandSystem.ICommand.Command
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Commands.ListCommand.Aliases
  commentId: P:PluginAPI.Commands.ListCommand.Aliases
  id: Aliases
  parent: PluginAPI.Commands.ListCommand
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: ListCommand.Aliases
  fullName: PluginAPI.Commands.ListCommand.Aliases
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/ListCommand.cs
      branch: master
      repo: git@github.com:northwood-studios/NwPluginAPI.git
    id: Aliases
    path: ../NwPluginAPI/Commands/ListCommand.cs
    startLine: 16
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  example: []
  syntax:
    content: public string[] Aliases { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Aliases As String()
  overload: PluginAPI.Commands.ListCommand.Aliases*
  implements:
  - CommandSystem.ICommand.Aliases
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Commands.ListCommand.Description
  commentId: P:PluginAPI.Commands.ListCommand.Description
  id: Description
  parent: PluginAPI.Commands.ListCommand
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ListCommand.Description
  fullName: PluginAPI.Commands.ListCommand.Description
  type: Property
  source:
    remote:
      path: NwPluginAPI/Commands/ListCommand.cs
      branch: master
      repo: git@github.com:northwood-studios/NwPluginAPI.git
    id: Description
    path: ../NwPluginAPI/Commands/ListCommand.cs
    startLine: 18
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: PluginAPI.Commands.ListCommand.Description*
  implements:
  - CommandSystem.ICommand.Description
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PluginAPI.Commands.ListCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  commentId: M:PluginAPI.Commands.ListCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  id: Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  parent: PluginAPI.Commands.ListCommand
  langs:
  - csharp
  - vb
  name: Execute(ArraySegment<String>, ICommandSender, out String)
  nameWithType: ListCommand.Execute(ArraySegment<String>, ICommandSender, out String)
  fullName: PluginAPI.Commands.ListCommand.Execute(System.ArraySegment<System.String>, CommandSystem.ICommandSender, out System.String)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Commands/ListCommand.cs
      branch: master
      repo: git@github.com:northwood-studios/NwPluginAPI.git
    id: Execute
    path: ../NwPluginAPI/Commands/ListCommand.cs
    startLine: 20
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Commands
  syntax:
    content: public bool Execute(ArraySegment<string> arguments, ICommandSender sender, out string response)
    parameters:
    - id: arguments
      type: System.ArraySegment{System.String}
    - id: sender
      type: CommandSystem.ICommandSender
    - id: response
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Execute(arguments As ArraySegment(Of String), sender As ICommandSender, ByRef response As String) As Boolean
  overload: PluginAPI.Commands.ListCommand.Execute*
  implements:
  - CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  nameWithType.vb: ListCommand.Execute(ArraySegment(Of String), ICommandSender, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Commands.ListCommand.Execute(System.ArraySegment(Of System.String), CommandSystem.ICommandSender, ByRef System.String)
  name.vb: Execute(ArraySegment(Of String), ICommandSender, ByRef String)
references:
- uid: PluginAPI.Commands
  commentId: N:PluginAPI.Commands
  name: PluginAPI.Commands
  nameWithType: PluginAPI.Commands
  fullName: PluginAPI.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CommandSystem.ICommand
  commentId: T:CommandSystem.ICommand
  parent: CommandSystem
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: CommandSystem.ICommand
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CommandSystem
  commentId: N:CommandSystem
  isExternal: true
  name: CommandSystem
  nameWithType: CommandSystem
  fullName: CommandSystem
- uid: PluginAPI.Commands.ListCommand.Command*
  commentId: Overload:PluginAPI.Commands.ListCommand.Command
  name: Command
  nameWithType: ListCommand.Command
  fullName: PluginAPI.Commands.ListCommand.Command
- uid: CommandSystem.ICommand.Command
  commentId: P:CommandSystem.ICommand.Command
  parent: CommandSystem.ICommand
  isExternal: true
  name: Command
  nameWithType: ICommand.Command
  fullName: CommandSystem.ICommand.Command
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PluginAPI.Commands.ListCommand.Aliases*
  commentId: Overload:PluginAPI.Commands.ListCommand.Aliases
  name: Aliases
  nameWithType: ListCommand.Aliases
  fullName: PluginAPI.Commands.ListCommand.Aliases
- uid: CommandSystem.ICommand.Aliases
  commentId: P:CommandSystem.ICommand.Aliases
  parent: CommandSystem.ICommand
  isExternal: true
  name: Aliases
  nameWithType: ICommand.Aliases
  fullName: CommandSystem.ICommand.Aliases
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: PluginAPI.Commands.ListCommand.Description*
  commentId: Overload:PluginAPI.Commands.ListCommand.Description
  name: Description
  nameWithType: ListCommand.Description
  fullName: PluginAPI.Commands.ListCommand.Description
- uid: CommandSystem.ICommand.Description
  commentId: P:CommandSystem.ICommand.Description
  parent: CommandSystem.ICommand
  isExternal: true
  name: Description
  nameWithType: ICommand.Description
  fullName: CommandSystem.ICommand.Description
- uid: PluginAPI.Commands.ListCommand.Execute*
  commentId: Overload:PluginAPI.Commands.ListCommand.Execute
  name: Execute
  nameWithType: ListCommand.Execute
  fullName: PluginAPI.Commands.ListCommand.Execute
- uid: CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  commentId: M:CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
  parent: CommandSystem.ICommand
  isExternal: true
  name: Execute(ArraySegment<String>, ICommandSender, String)
  nameWithType: ICommand.Execute(ArraySegment<String>, ICommandSender, String)
  fullName: CommandSystem.ICommand.Execute(System.ArraySegment<System.String>, CommandSystem.ICommandSender, System.String)
  nameWithType.vb: ICommand.Execute(ArraySegment(Of String), ICommandSender, String)
  fullName.vb: CommandSystem.ICommand.Execute(System.ArraySegment(Of System.String), CommandSystem.ICommandSender, System.String)
  name.vb: Execute(ArraySegment(Of String), ICommandSender, String)
  spec.csharp:
  - uid: CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: CommandSystem.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommandSender
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: CommandSystem.ICommandSender
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: CommandSystem.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CommandSystem.ICommandSender
    name: ICommandSender
    nameWithType: ICommandSender
    fullName: CommandSystem.ICommandSender
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArraySegment{System.String}
  commentId: T:System.ArraySegment{System.String}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<String>
  nameWithType: ArraySegment<String>
  fullName: System.ArraySegment<System.String>
  nameWithType.vb: ArraySegment(Of String)
  fullName.vb: System.ArraySegment(Of System.String)
  name.vb: ArraySegment(Of String)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CommandSystem.ICommandSender
  commentId: T:CommandSystem.ICommandSender
  parent: CommandSystem
  isExternal: true
  name: ICommandSender
  nameWithType: ICommandSender
  fullName: CommandSystem.ICommandSender
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
