### YamlMime:ManagedReference
items:
- uid: PluginAPI.Loader.AssemblyLoader
  commentId: T:PluginAPI.Loader.AssemblyLoader
  id: AssemblyLoader
  parent: PluginAPI.Loader
  children:
  - PluginAPI.Loader.AssemblyLoader.Dependencies
  - PluginAPI.Loader.AssemblyLoader.Initialize
  - PluginAPI.Loader.AssemblyLoader.InstalledPlugins
  - PluginAPI.Loader.AssemblyLoader.IsLoaded
  - PluginAPI.Loader.AssemblyLoader.MainAssembly
  - PluginAPI.Loader.AssemblyLoader.Plugins
  langs:
  - csharp
  - vb
  name: AssemblyLoader
  nameWithType: AssemblyLoader
  fullName: PluginAPI.Loader.AssemblyLoader
  type: Class
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: AssemblyLoader
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 19
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nManages initialization of plugin system and loading of plugins.\n"
  example: []
  syntax:
    content: public static class AssemblyLoader
    content.vb: Public Module AssemblyLoader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: PluginAPI.Loader.AssemblyLoader.MainAssembly
  commentId: P:PluginAPI.Loader.AssemblyLoader.MainAssembly
  id: MainAssembly
  parent: PluginAPI.Loader.AssemblyLoader
  langs:
  - csharp
  - vb
  name: MainAssembly
  nameWithType: AssemblyLoader.MainAssembly
  fullName: PluginAPI.Loader.AssemblyLoader.MainAssembly
  type: Property
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: MainAssembly
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 26
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nGets a main assembly of game.\n"
  example: []
  syntax:
    content: public static Assembly MainAssembly { get; }
    parameters: []
    return:
      type: System.Reflection.Assembly
    content.vb: Public Shared ReadOnly Property MainAssembly As Assembly
  overload: PluginAPI.Loader.AssemblyLoader.MainAssembly*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Loader.AssemblyLoader.Plugins
  commentId: P:PluginAPI.Loader.AssemblyLoader.Plugins
  id: Plugins
  parent: PluginAPI.Loader.AssemblyLoader
  langs:
  - csharp
  - vb
  name: Plugins
  nameWithType: AssemblyLoader.Plugins
  fullName: PluginAPI.Loader.AssemblyLoader.Plugins
  type: Property
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Plugins
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 38
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nGets a list of all recognized and loaded plugins.\n"
  example: []
  syntax:
    content: public static Dictionary<Assembly, Dictionary<Type, PluginHandler>> Plugins { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.Type,PluginAPI.Core.PluginHandler}}
    content.vb: Public Shared ReadOnly Property Plugins As Dictionary(Of Assembly, Dictionary(Of Type, PluginHandler))
  overload: PluginAPI.Loader.AssemblyLoader.Plugins*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Loader.AssemblyLoader.InstalledPlugins
  commentId: P:PluginAPI.Loader.AssemblyLoader.InstalledPlugins
  id: InstalledPlugins
  parent: PluginAPI.Loader.AssemblyLoader
  langs:
  - csharp
  - vb
  name: InstalledPlugins
  nameWithType: AssemblyLoader.InstalledPlugins
  fullName: PluginAPI.Loader.AssemblyLoader.InstalledPlugins
  type: Property
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: InstalledPlugins
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 45
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nGets a list of all installed and enabled plugins.\n"
  example: []
  syntax:
    content: public static IEnumerable<PluginHandler> InstalledPlugins { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{PluginAPI.Core.PluginHandler}
    content.vb: Public Shared ReadOnly Property InstalledPlugins As IEnumerable(Of PluginHandler)
  overload: PluginAPI.Loader.AssemblyLoader.InstalledPlugins*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Loader.AssemblyLoader.Dependencies
  commentId: P:PluginAPI.Loader.AssemblyLoader.Dependencies
  id: Dependencies
  parent: PluginAPI.Loader.AssemblyLoader
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: AssemblyLoader.Dependencies
  fullName: PluginAPI.Loader.AssemblyLoader.Dependencies
  type: Property
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Dependencies
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 50
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nGets a list of all recognized and loaded dependencies.\n"
  example: []
  syntax:
    content: public static List<Assembly> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Reflection.Assembly}
    content.vb: Public Shared ReadOnly Property Dependencies As List(Of Assembly)
  overload: PluginAPI.Loader.AssemblyLoader.Dependencies*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Loader.AssemblyLoader.IsLoaded
  commentId: P:PluginAPI.Loader.AssemblyLoader.IsLoaded
  id: IsLoaded
  parent: PluginAPI.Loader.AssemblyLoader
  langs:
  - csharp
  - vb
  name: IsLoaded
  nameWithType: AssemblyLoader.IsLoaded
  fullName: PluginAPI.Loader.AssemblyLoader.IsLoaded
  type: Property
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: IsLoaded
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 56
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nWhether the loader has been run already.\n<remarks>This exists to prevent the loader from being ran multiple times in one session.</remarks>\n"
  example: []
  syntax:
    content: public static bool IsLoaded { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property IsLoaded As Boolean
  overload: PluginAPI.Loader.AssemblyLoader.IsLoaded*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Loader.AssemblyLoader.Initialize
  commentId: M:PluginAPI.Loader.AssemblyLoader.Initialize
  id: Initialize
  parent: PluginAPI.Loader.AssemblyLoader
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: AssemblyLoader.Initialize()
  fullName: PluginAPI.Loader.AssemblyLoader.Initialize()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Loader/AssemblyLoader.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Initialize
    path: ../NwPluginAPI/Loader/AssemblyLoader.cs
    startLine: 61
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Loader
  summary: "\nRan on server startup, loads plugins and dependencies and all main features from the API.\n"
  example: []
  syntax:
    content: public static void Initialize()
    content.vb: Public Shared Sub Initialize
  overload: PluginAPI.Loader.AssemblyLoader.Initialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: PluginAPI.Loader
  commentId: N:PluginAPI.Loader
  name: PluginAPI.Loader
  nameWithType: PluginAPI.Loader
  fullName: PluginAPI.Loader
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PluginAPI.Loader.AssemblyLoader.MainAssembly*
  commentId: Overload:PluginAPI.Loader.AssemblyLoader.MainAssembly
  name: MainAssembly
  nameWithType: AssemblyLoader.MainAssembly
  fullName: PluginAPI.Loader.AssemblyLoader.MainAssembly
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: PluginAPI.Loader.AssemblyLoader.Plugins*
  commentId: Overload:PluginAPI.Loader.AssemblyLoader.Plugins
  name: Plugins
  nameWithType: AssemblyLoader.Plugins
  fullName: PluginAPI.Loader.AssemblyLoader.Plugins
- uid: System.Collections.Generic.Dictionary{System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.Type,PluginAPI.Core.PluginHandler}}
  commentId: T:System.Collections.Generic.Dictionary{System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.Type,PluginAPI.Core.PluginHandler}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Assembly, Dictionary<Type, PluginHandler>>
  nameWithType: Dictionary<Assembly, Dictionary<Type, PluginHandler>>
  fullName: System.Collections.Generic.Dictionary<System.Reflection.Assembly, System.Collections.Generic.Dictionary<System.Type, PluginAPI.Core.PluginHandler>>
  nameWithType.vb: Dictionary(Of Assembly, Dictionary(Of Type, PluginHandler))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Reflection.Assembly, System.Collections.Generic.Dictionary(Of System.Type, PluginAPI.Core.PluginHandler))
  name.vb: Dictionary(Of Assembly, Dictionary(Of Type, PluginHandler))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PluginAPI.Core.PluginHandler
    name: PluginHandler
    nameWithType: PluginHandler
    fullName: PluginAPI.Core.PluginHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PluginAPI.Core.PluginHandler
    name: PluginHandler
    nameWithType: PluginHandler
    fullName: PluginAPI.Core.PluginHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PluginAPI.Loader.AssemblyLoader.InstalledPlugins*
  commentId: Overload:PluginAPI.Loader.AssemblyLoader.InstalledPlugins
  name: InstalledPlugins
  nameWithType: AssemblyLoader.InstalledPlugins
  fullName: PluginAPI.Loader.AssemblyLoader.InstalledPlugins
- uid: System.Collections.Generic.IEnumerable{PluginAPI.Core.PluginHandler}
  commentId: T:System.Collections.Generic.IEnumerable{PluginAPI.Core.PluginHandler}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PluginHandler>
  nameWithType: IEnumerable<PluginHandler>
  fullName: System.Collections.Generic.IEnumerable<PluginAPI.Core.PluginHandler>
  nameWithType.vb: IEnumerable(Of PluginHandler)
  fullName.vb: System.Collections.Generic.IEnumerable(Of PluginAPI.Core.PluginHandler)
  name.vb: IEnumerable(Of PluginHandler)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Core.PluginHandler
    name: PluginHandler
    nameWithType: PluginHandler
    fullName: PluginAPI.Core.PluginHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Core.PluginHandler
    name: PluginHandler
    nameWithType: PluginHandler
    fullName: PluginAPI.Core.PluginHandler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Loader.AssemblyLoader.Dependencies*
  commentId: Overload:PluginAPI.Loader.AssemblyLoader.Dependencies
  name: Dependencies
  nameWithType: AssemblyLoader.Dependencies
  fullName: PluginAPI.Loader.AssemblyLoader.Dependencies
- uid: System.Collections.Generic.List{System.Reflection.Assembly}
  commentId: T:System.Collections.Generic.List{System.Reflection.Assembly}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Assembly>
  nameWithType: List<Assembly>
  fullName: System.Collections.Generic.List<System.Reflection.Assembly>
  nameWithType.vb: List(Of Assembly)
  fullName.vb: System.Collections.Generic.List(Of System.Reflection.Assembly)
  name.vb: List(Of Assembly)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Loader.AssemblyLoader.IsLoaded*
  commentId: Overload:PluginAPI.Loader.AssemblyLoader.IsLoaded
  name: IsLoaded
  nameWithType: AssemblyLoader.IsLoaded
  fullName: PluginAPI.Loader.AssemblyLoader.IsLoaded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PluginAPI.Loader.AssemblyLoader.Initialize*
  commentId: Overload:PluginAPI.Loader.AssemblyLoader.Initialize
  name: Initialize
  nameWithType: AssemblyLoader.Initialize
  fullName: PluginAPI.Loader.AssemblyLoader.Initialize
