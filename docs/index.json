{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Nw Plugin API",
    "keywords": "W.I.P"
  },
  "articles/gettingstarted/codeprerequisites.html": {
    "href": "articles/gettingstarted/codeprerequisites.html",
    "title": "Plugin prerequisites | Nw Plugin API",
    "keywords": "Plugin prerequisites The Plugin Class Your plugin must have a Plugin class. The Plugin class is the main class of your plugin. It contains the entry point of your plugin and is used to initialize your plugin. It is typically named either Plugin , MainClass , or the name of your plugin. The Plugin class must have a method with the PluginEntryPoint attribute. 4 parameters must be passed on to PluginEntryPoint attribute, in the following order: Plugin Name, Plugin Version, Plugin Author, and Plugin Description. If you are planning to use any kind of events, you would call EventManager::RegisterEvents in the PluginEntryPoint method, more on that in the EventHandlers section. Here is also where a Singleton would be initialized. ### The Config Class #### The Config class isn't required, but is recommended since you will need to if you're planning on letting serverhosts make any changes to your plugin The Config class contains properties, which values will be serialized and deserialized into/from a YML file when the plugin loads. Properties are similar to fields, except they have a getter and a setter. public string Text { get; set; } is an example property. Properties can be of any supported type, but they must be public. You can prevent properties from being serialized using the [YamlIgnore] attribute, this, however, will require the YamlDotNet package to be installed. Non-public properties and anything else that isn't a property will be ignored. You need to define your Config class in the Plugin class using the PluginConfig attribute, by adding it to a field with your Config class as type. This typicially looks like this: csharp [PluginConfig] public Config Config; You can access any values inside the config via its instance defined the the Plugin class. If you need to read values outside the Plugin class, consider making your Plugin a Singleton . ### Event Handlers An event handler is a method that are called when a specific event is triggered. An event handler is marked with the PluginEvent(EventType) attribute. Any class containing an event handler must be registered using EventManager.RegisterEvents<CLASSNAME>(this); in the PluginEntryPoint method. If the event handler is in the Plugin class, you can simply call EventManager.RegisterEvents(this); . Here is an example of an event handler which displays a welcome message: csharp [PluginEvent(ServerEventType.PlayerJoined)] public void OnPlayerJoin(Player player) { player.SendBroadcast(\"Welcome to the server!\", 5); }"
  },
  "articles/gettingstarted/gettingstarted.html": {
    "href": "articles/gettingstarted/gettingstarted.html",
    "title": "Making your first plugin | Nw Plugin API",
    "keywords": "Making your first plugin Environment setup: IDE (Beginner-friendly) CLI (For people who can't run an IDE) Writing the code Plugin prerequisites"
  },
  "articles/gettingstarted/gettingstarted-cli.html": {
    "href": "articles/gettingstarted/gettingstarted-cli.html",
    "title": "Setting up your environment | Nw Plugin API",
    "keywords": "Setting up your environment Prerequisites .NET CLI .NET Framework 4.8 Any text editor Visual Studio Code is the most popular choice ## Creating the project Open your terminal of choice at the location you want to create your project at Run dotnet new console -n MyName Open the MyName.csproj file inside the MyName folder and change TargetFramework to net4.8 Adding References Run dotnet add package Northwood.PluginApi -prerelease"
  },
  "articles/gettingstarted/gettingstarted-ide.html": {
    "href": "articles/gettingstarted/gettingstarted-ide.html",
    "title": "Setting up your environment | Nw Plugin API",
    "keywords": "Setting up your environment Prerequisites .NET Framework 4.8 An IDE Visual Studio is a popular choice that is free Make sure to select the .NET desktop development workload Jetbrains Rider is the premium option that is free for students. Creating the project Visual Studio walkthrough Open Visual Studio Click Create a new project View Image Select C# and Class Library (.NET Framework) View Image Click Next and select .NET Framework 4.8 from the dropdown, optionally give your plugin a name View Image Click Create Rider walkthrough Open Rider Click New Solution View Image Under .NET Framework select Class Library and make sure framework is set to v4.8 , optionally specify a solution name View Image Click Create Adding References Visual Studio walkthrough Right click on your project in the solution explorer and select Manage NuGet Packages for Solution You might need to sign into your Microsoft account on the top right to do this. View Image Select the Browse tab and search Northwood.PluginApi . You currently need to check the Include prerelease checkbox to find the latest version View Image Select it from the list, click on the checkmark next to your project, and click Install View Image Press OK or I Accept if any prompt(s) shows up. Rider walkthrough Right click on your project in the solution explorer and select Manage NuGet Packages View Image Select the Browse tab and search Northwood.PluginApi . You currently need to check the Include prerelease checkbox to find the latest version View Image Press the green checkmark"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "NwAPI Introduction | Nw Plugin API",
    "keywords": "NwAPI Introduction TODO: link to gettingstarted.md + write intro"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Nw Plugin API",
    "keywords": "W.I.P"
  }
}