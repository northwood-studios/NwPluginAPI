### YamlMime:ManagedReference
items:
- uid: PluginAPI.Events.EventManager
  commentId: T:PluginAPI.Events.EventManager
  id: EventManager
  parent: PluginAPI.Events
  children:
  - PluginAPI.Events.EventManager.Events
  - PluginAPI.Events.EventManager.ExecuteEvent(PluginAPI.Enums.ServerEventType,System.Object[])
  - PluginAPI.Events.EventManager.ExecuteEvent``1(PluginAPI.Enums.ServerEventType,System.Object[])
  - PluginAPI.Events.EventManager.RegisterAllEvents(System.Object)
  - PluginAPI.Events.EventManager.RegisterEvents(System.Object)
  - PluginAPI.Events.EventManager.RegisterEvents(System.Object,System.Object)
  - PluginAPI.Events.EventManager.RegisterEvents``1(System.Object)
  - PluginAPI.Events.EventManager.UnregisterAllEvents(System.Object)
  - PluginAPI.Events.EventManager.UnregisterEvents(System.Object)
  - PluginAPI.Events.EventManager.UnregisterEvents(System.Object,System.Object)
  - PluginAPI.Events.EventManager.UnregisterEvents``1(System.Object)
  langs:
  - csharp
  - vb
  name: EventManager
  nameWithType: EventManager
  fullName: PluginAPI.Events.EventManager
  type: Class
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: EventManager
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 36
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nManages plugin events.\n"
  example: []
  syntax:
    content: public static class EventManager
    content.vb: Public Module EventManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: PluginAPI.Events.EventManager.Events
  commentId: F:PluginAPI.Events.EventManager.Events
  id: Events
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: EventManager.Events
  fullName: PluginAPI.Events.EventManager.Events
  type: Field
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Events
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 46
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nContains all events and their parameters.\n"
  example: []
  syntax:
    content: public static readonly Dictionary<ServerEventType, Event> Events
    return:
      type: System.Collections.Generic.Dictionary{PluginAPI.Enums.ServerEventType,PluginAPI.Events.Event}
    content.vb: Public Shared ReadOnly Events As Dictionary(Of ServerEventType,  Event)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: PluginAPI.Events.EventManager.RegisterAllEvents(System.Object)
  commentId: M:PluginAPI.Events.EventManager.RegisterAllEvents(System.Object)
  id: RegisterAllEvents(System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: RegisterAllEvents(Object)
  nameWithType: EventManager.RegisterAllEvents(Object)
  fullName: PluginAPI.Events.EventManager.RegisterAllEvents(System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: RegisterAllEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 407
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRegisters all events in plugin.\n"
  example: []
  syntax:
    content: public static void RegisterAllEvents(object plugin)
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    content.vb: Public Shared Sub RegisterAllEvents(plugin As Object)
  overload: PluginAPI.Events.EventManager.RegisterAllEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Events.EventManager.UnregisterAllEvents(System.Object)
  commentId: M:PluginAPI.Events.EventManager.UnregisterAllEvents(System.Object)
  id: UnregisterAllEvents(System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: UnregisterAllEvents(Object)
  nameWithType: EventManager.UnregisterAllEvents(Object)
  fullName: PluginAPI.Events.EventManager.UnregisterAllEvents(System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: UnregisterAllEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 446
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRegisters all events in plugin.\n"
  example: []
  syntax:
    content: public static void UnregisterAllEvents(object plugin)
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    content.vb: Public Shared Sub UnregisterAllEvents(plugin As Object)
  overload: PluginAPI.Events.EventManager.UnregisterAllEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Events.EventManager.RegisterEvents(System.Object)
  commentId: M:PluginAPI.Events.EventManager.RegisterEvents(System.Object)
  id: RegisterEvents(System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: RegisterEvents(Object)
  nameWithType: EventManager.RegisterEvents(Object)
  fullName: PluginAPI.Events.EventManager.RegisterEvents(System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: RegisterEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 465
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRegisters events in plugin.\n"
  example: []
  syntax:
    content: public static void RegisterEvents(object plugin)
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    content.vb: Public Shared Sub RegisterEvents(plugin As Object)
  overload: PluginAPI.Events.EventManager.RegisterEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Events.EventManager.UnregisterEvents(System.Object)
  commentId: M:PluginAPI.Events.EventManager.UnregisterEvents(System.Object)
  id: UnregisterEvents(System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: UnregisterEvents(Object)
  nameWithType: EventManager.UnregisterEvents(Object)
  fullName: PluginAPI.Events.EventManager.UnregisterEvents(System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: UnregisterEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 475
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nUnregisters events in plugin.\n"
  example: []
  syntax:
    content: public static void UnregisterEvents(object plugin)
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    content.vb: Public Shared Sub UnregisterEvents(plugin As Object)
  overload: PluginAPI.Events.EventManager.UnregisterEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Events.EventManager.RegisterEvents``1(System.Object)
  commentId: M:PluginAPI.Events.EventManager.RegisterEvents``1(System.Object)
  id: RegisterEvents``1(System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: RegisterEvents<T>(Object)
  nameWithType: EventManager.RegisterEvents<T>(Object)
  fullName: PluginAPI.Events.EventManager.RegisterEvents<T>(System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: RegisterEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 485
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRegisters events in type of plugin.\n"
  example: []
  syntax:
    content: >-
      public static void RegisterEvents<T>(object plugin)
          where T : class
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub RegisterEvents(Of T As Class)(plugin As Object)
  overload: PluginAPI.Events.EventManager.RegisterEvents*
  nameWithType.vb: EventManager.RegisterEvents(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Events.EventManager.RegisterEvents(Of T)(System.Object)
  name.vb: RegisterEvents(Of T)(Object)
- uid: PluginAPI.Events.EventManager.UnregisterEvents``1(System.Object)
  commentId: M:PluginAPI.Events.EventManager.UnregisterEvents``1(System.Object)
  id: UnregisterEvents``1(System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: UnregisterEvents<T>(Object)
  nameWithType: EventManager.UnregisterEvents<T>(Object)
  fullName: PluginAPI.Events.EventManager.UnregisterEvents<T>(System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: UnregisterEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 500
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nUnregisters events in type of plugin.\n"
  example: []
  syntax:
    content: >-
      public static void UnregisterEvents<T>(object plugin)
          where T : class
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub UnregisterEvents(Of T As Class)(plugin As Object)
  overload: PluginAPI.Events.EventManager.UnregisterEvents*
  nameWithType.vb: EventManager.UnregisterEvents(Of T)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Events.EventManager.UnregisterEvents(Of T)(System.Object)
  name.vb: UnregisterEvents(Of T)(Object)
- uid: PluginAPI.Events.EventManager.RegisterEvents(System.Object,System.Object)
  commentId: M:PluginAPI.Events.EventManager.RegisterEvents(System.Object,System.Object)
  id: RegisterEvents(System.Object,System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: RegisterEvents(Object, Object)
  nameWithType: EventManager.RegisterEvents(Object, Object)
  fullName: PluginAPI.Events.EventManager.RegisterEvents(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: RegisterEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 512
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nRegisters events in type of plugin.\n"
  example: []
  syntax:
    content: public static void RegisterEvents(object plugin, object eventHandler)
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    - id: eventHandler
      type: System.Object
      description: The event handler.
    content.vb: Public Shared Sub RegisterEvents(plugin As Object, eventHandler As Object)
  overload: PluginAPI.Events.EventManager.RegisterEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Events.EventManager.UnregisterEvents(System.Object,System.Object)
  commentId: M:PluginAPI.Events.EventManager.UnregisterEvents(System.Object,System.Object)
  id: UnregisterEvents(System.Object,System.Object)
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: UnregisterEvents(Object, Object)
  nameWithType: EventManager.UnregisterEvents(Object, Object)
  fullName: PluginAPI.Events.EventManager.UnregisterEvents(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: UnregisterEvents
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 519
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nUnregisters events in type of plugin.\n"
  example: []
  syntax:
    content: public static void UnregisterEvents(object plugin, object eventHandler)
    parameters:
    - id: plugin
      type: System.Object
      description: The object of plugin.
    - id: eventHandler
      type: System.Object
      description: The event handler.
    content.vb: Public Shared Sub UnregisterEvents(plugin As Object, eventHandler As Object)
  overload: PluginAPI.Events.EventManager.UnregisterEvents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PluginAPI.Events.EventManager.ExecuteEvent(PluginAPI.Enums.ServerEventType,System.Object[])
  commentId: M:PluginAPI.Events.EventManager.ExecuteEvent(PluginAPI.Enums.ServerEventType,System.Object[])
  id: ExecuteEvent(PluginAPI.Enums.ServerEventType,System.Object[])
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: ExecuteEvent(ServerEventType, Object[])
  nameWithType: EventManager.ExecuteEvent(ServerEventType, Object[])
  fullName: PluginAPI.Events.EventManager.ExecuteEvent(PluginAPI.Enums.ServerEventType, System.Object[])
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ExecuteEvent
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 596
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nExecutes event.\n"
  example: []
  syntax:
    content: public static bool ExecuteEvent(ServerEventType type, params object[] args)
    parameters:
    - id: type
      type: PluginAPI.Enums.ServerEventType
      description: The type of event
    - id: args
      type: System.Object[]
      description: The arguments of event.
    return:
      type: System.Boolean
      description: If false event is cancelled.
    content.vb: Public Shared Function ExecuteEvent(type As ServerEventType, ParamArray args As Object()) As Boolean
  overload: PluginAPI.Events.EventManager.ExecuteEvent*
  nameWithType.vb: EventManager.ExecuteEvent(ServerEventType, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Events.EventManager.ExecuteEvent(PluginAPI.Enums.ServerEventType, System.Object())
  name.vb: ExecuteEvent(ServerEventType, Object())
- uid: PluginAPI.Events.EventManager.ExecuteEvent``1(PluginAPI.Enums.ServerEventType,System.Object[])
  commentId: M:PluginAPI.Events.EventManager.ExecuteEvent``1(PluginAPI.Enums.ServerEventType,System.Object[])
  id: ExecuteEvent``1(PluginAPI.Enums.ServerEventType,System.Object[])
  parent: PluginAPI.Events.EventManager
  langs:
  - csharp
  - vb
  name: ExecuteEvent<T>(ServerEventType, Object[])
  nameWithType: EventManager.ExecuteEvent<T>(ServerEventType, Object[])
  fullName: PluginAPI.Events.EventManager.ExecuteEvent<T>(PluginAPI.Enums.ServerEventType, System.Object[])
  type: Method
  source:
    remote:
      path: NwPluginAPI/Events/EventManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ExecuteEvent
    path: ../NwPluginAPI/Events/EventManager.cs
    startLine: 605
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Events
  summary: "\nExecutes event.\n"
  example: []
  syntax:
    content: >-
      public static T ExecuteEvent<T>(ServerEventType type, params object[] args)
          where T : struct
    parameters:
    - id: type
      type: PluginAPI.Enums.ServerEventType
      description: The type of event
    - id: args
      type: System.Object[]
      description: The arguments of event.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Event cancellation data.
    content.vb: Public Shared Function ExecuteEvent(Of T As Structure)(type As ServerEventType, ParamArray args As Object()) As T
  overload: PluginAPI.Events.EventManager.ExecuteEvent*
  nameWithType.vb: EventManager.ExecuteEvent(Of T)(ServerEventType, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: PluginAPI.Events.EventManager.ExecuteEvent(Of T)(PluginAPI.Enums.ServerEventType, System.Object())
  name.vb: ExecuteEvent(Of T)(ServerEventType, Object())
references:
- uid: PluginAPI.Events
  commentId: N:PluginAPI.Events
  name: PluginAPI.Events
  nameWithType: PluginAPI.Events
  fullName: PluginAPI.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{PluginAPI.Enums.ServerEventType,PluginAPI.Events.Event}
  commentId: T:System.Collections.Generic.Dictionary{PluginAPI.Enums.ServerEventType,PluginAPI.Events.Event}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ServerEventType, Event>
  nameWithType: Dictionary<ServerEventType, Event>
  fullName: System.Collections.Generic.Dictionary<PluginAPI.Enums.ServerEventType, PluginAPI.Events.Event>
  nameWithType.vb: Dictionary(Of ServerEventType, Event)
  fullName.vb: System.Collections.Generic.Dictionary(Of PluginAPI.Enums.ServerEventType, PluginAPI.Events.Event)
  name.vb: Dictionary(Of ServerEventType, Event)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Enums.ServerEventType
    name: ServerEventType
    nameWithType: ServerEventType
    fullName: PluginAPI.Enums.ServerEventType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PluginAPI.Events.Event
    name: Event
    nameWithType: Event
    fullName: PluginAPI.Events.Event
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Enums.ServerEventType
    name: ServerEventType
    nameWithType: ServerEventType
    fullName: PluginAPI.Enums.ServerEventType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: PluginAPI.Events.Event
    name: Event
    nameWithType: Event
    fullName: PluginAPI.Events.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: PluginAPI.Events.EventManager.RegisterAllEvents*
  commentId: Overload:PluginAPI.Events.EventManager.RegisterAllEvents
  name: RegisterAllEvents
  nameWithType: EventManager.RegisterAllEvents
  fullName: PluginAPI.Events.EventManager.RegisterAllEvents
- uid: PluginAPI.Events.EventManager.UnregisterAllEvents*
  commentId: Overload:PluginAPI.Events.EventManager.UnregisterAllEvents
  name: UnregisterAllEvents
  nameWithType: EventManager.UnregisterAllEvents
  fullName: PluginAPI.Events.EventManager.UnregisterAllEvents
- uid: PluginAPI.Events.EventManager.RegisterEvents*
  commentId: Overload:PluginAPI.Events.EventManager.RegisterEvents
  name: RegisterEvents
  nameWithType: EventManager.RegisterEvents
  fullName: PluginAPI.Events.EventManager.RegisterEvents
- uid: PluginAPI.Events.EventManager.UnregisterEvents*
  commentId: Overload:PluginAPI.Events.EventManager.UnregisterEvents
  name: UnregisterEvents
  nameWithType: EventManager.UnregisterEvents
  fullName: PluginAPI.Events.EventManager.UnregisterEvents
- uid: PluginAPI.Events.EventManager.ExecuteEvent*
  commentId: Overload:PluginAPI.Events.EventManager.ExecuteEvent
  name: ExecuteEvent
  nameWithType: EventManager.ExecuteEvent
  fullName: PluginAPI.Events.EventManager.ExecuteEvent
- uid: PluginAPI.Enums.ServerEventType
  commentId: T:PluginAPI.Enums.ServerEventType
  parent: PluginAPI.Enums
  name: ServerEventType
  nameWithType: ServerEventType
  fullName: PluginAPI.Enums.ServerEventType
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PluginAPI.Enums
  commentId: N:PluginAPI.Enums
  name: PluginAPI.Enums
  nameWithType: PluginAPI.Enums
  fullName: PluginAPI.Enums
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
