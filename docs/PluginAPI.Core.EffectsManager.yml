### YamlMime:ManagedReference
items:
- uid: PluginAPI.Core.EffectsManager
  commentId: T:PluginAPI.Core.EffectsManager
  id: EffectsManager
  parent: PluginAPI.Core
  children:
  - PluginAPI.Core.EffectsManager.#ctor(PluginAPI.Core.Player)
  - PluginAPI.Core.EffectsManager.ChangeState(System.String,System.Byte,System.Single,System.Boolean)
  - PluginAPI.Core.EffectsManager.ChangeState``1(System.Byte,System.Single,System.Boolean)
  - PluginAPI.Core.EffectsManager.DisableAllEffects
  - PluginAPI.Core.EffectsManager.DisableEffect``1
  - PluginAPI.Core.EffectsManager.EnableEffect``1(System.Single,System.Boolean)
  - PluginAPI.Core.EffectsManager.GetEffect``1
  - PluginAPI.Core.EffectsManager.TryGetEffect(System.String,CustomPlayerEffects.StatusEffectBase@)
  - PluginAPI.Core.EffectsManager.TryGetEffect``1(``0@)
  langs:
  - csharp
  - vb
  name: EffectsManager
  nameWithType: EffectsManager
  fullName: PluginAPI.Core.EffectsManager
  type: Class
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: EffectsManager
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 7
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nManages a players effects.\n"
  example: []
  syntax:
    content: public class EffectsManager
    content.vb: Public Class EffectsManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PluginAPI.Core.EffectsManager.#ctor(PluginAPI.Core.Player)
  commentId: M:PluginAPI.Core.EffectsManager.#ctor(PluginAPI.Core.Player)
  id: '#ctor(PluginAPI.Core.Player)'
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: EffectsManager(Player)
  nameWithType: EffectsManager.EffectsManager(Player)
  fullName: PluginAPI.Core.EffectsManager.EffectsManager(PluginAPI.Core.Player)
  type: Constructor
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: .ctor
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 15
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nInitializes a new instance of the <xref href=\"PluginAPI.Core.EffectsManager\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public EffectsManager(Player plr)
    parameters:
    - id: plr
      type: PluginAPI.Core.Player
      description: The player.
    content.vb: Public Sub New(plr As Player)
  overload: PluginAPI.Core.EffectsManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PluginAPI.Core.EffectsManager.ChangeState``1(System.Byte,System.Single,System.Boolean)
  commentId: M:PluginAPI.Core.EffectsManager.ChangeState``1(System.Byte,System.Single,System.Boolean)
  id: ChangeState``1(System.Byte,System.Single,System.Boolean)
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: ChangeState<T>(Byte, Single, Boolean)
  nameWithType: EffectsManager.ChangeState<T>(Byte, Single, Boolean)
  fullName: PluginAPI.Core.EffectsManager.ChangeState<T>(System.Byte, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ChangeState
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 24
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nChanges the state of a <xref href=\"CustomPlayerEffects.StatusEffectBase?text=status+effect\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"PluginAPI.Core.Player\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public T ChangeState<T>(byte intensity, float duration = 0F, bool addDuration = false)
          where T : StatusEffectBase
    parameters:
    - id: intensity
      type: System.Byte
      description: The effect&apos;s new intensity.
    - id: duration
      type: System.Single
      description: The effect&apos;s new duration.
    - id: addDuration
      type: System.Boolean
      description: Whether the duration will be forced set or added to it&apos;s current one.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Whether or not an effect was found.
    content.vb: Public Function ChangeState(Of T As StatusEffectBase)(intensity As Byte, duration As Single = 0F, addDuration As Boolean = False) As T
  overload: PluginAPI.Core.EffectsManager.ChangeState*
  nameWithType.vb: EffectsManager.ChangeState(Of T)(Byte, Single, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Core.EffectsManager.ChangeState(Of T)(System.Byte, System.Single, System.Boolean)
  name.vb: ChangeState(Of T)(Byte, Single, Boolean)
- uid: PluginAPI.Core.EffectsManager.ChangeState(System.String,System.Byte,System.Single,System.Boolean)
  commentId: M:PluginAPI.Core.EffectsManager.ChangeState(System.String,System.Byte,System.Single,System.Boolean)
  id: ChangeState(System.String,System.Byte,System.Single,System.Boolean)
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: ChangeState(String, Byte, Single, Boolean)
  nameWithType: EffectsManager.ChangeState(String, Byte, Single, Boolean)
  fullName: PluginAPI.Core.EffectsManager.ChangeState(System.String, System.Byte, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: ChangeState
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 35
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nChanges the state of a <xref href=\"CustomPlayerEffects.StatusEffectBase?text=status+effect\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"PluginAPI.Core.Player\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StatusEffectBase ChangeState(string effectName, byte intensity, float duration = 0F, bool addDuration = false)
    parameters:
    - id: effectName
      type: System.String
      description: The string that will be used to lookup the effect.
    - id: intensity
      type: System.Byte
      description: The effect&apos;s new intensity.
    - id: duration
      type: System.Single
      description: The effect&apos;s new duration.
    - id: addDuration
      type: System.Boolean
      description: Whether the duration will be forced set or added to it&apos;s current one.
    return:
      type: CustomPlayerEffects.StatusEffectBase
      description: Whether or not an effect was found.
    content.vb: Public Function ChangeState(effectName As String, intensity As Byte, duration As Single = 0F, addDuration As Boolean = False) As StatusEffectBase
  overload: PluginAPI.Core.EffectsManager.ChangeState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PluginAPI.Core.EffectsManager.DisableAllEffects
  commentId: M:PluginAPI.Core.EffectsManager.DisableAllEffects
  id: DisableAllEffects
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: DisableAllEffects()
  nameWithType: EffectsManager.DisableAllEffects()
  fullName: PluginAPI.Core.EffectsManager.DisableAllEffects()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: DisableAllEffects
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 41
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nDisables all <xref href=\"CustomPlayerEffects.StatusEffectBase?text=status+effects\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void DisableAllEffects()
    content.vb: Public Sub DisableAllEffects
  overload: PluginAPI.Core.EffectsManager.DisableAllEffects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PluginAPI.Core.EffectsManager.EnableEffect``1(System.Single,System.Boolean)
  commentId: M:PluginAPI.Core.EffectsManager.EnableEffect``1(System.Single,System.Boolean)
  id: EnableEffect``1(System.Single,System.Boolean)
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: EnableEffect<T>(Single, Boolean)
  nameWithType: EffectsManager.EnableEffect<T>(Single, Boolean)
  fullName: PluginAPI.Core.EffectsManager.EnableEffect<T>(System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: EnableEffect
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 50
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nEnables a specific <xref href=\"CustomPlayerEffects.StatusEffectBase?text=status+effect\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"PluginAPI.Core.Player\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public T EnableEffect<T>(float duration = 0F, bool addDuration = false)
          where T : StatusEffectBase
    parameters:
    - id: duration
      type: System.Single
      description: The effect&apos;s new duration, by default the effect is.
    - id: addDuration
      type: System.Boolean
      description: Whether the duration will be forced set or added to it&apos;s current one.
    typeParameters:
    - id: T
      description: The specified effect that will be looked for.
    return:
      type: '{T}'
      description: The <xref href="CustomPlayerEffects.StatusEffectBase" data-throw-if-not-resolved="false"></xref> instance of <code data-dev-comment-type="typeparamref" class="typeparamref">T</code>, otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>.
    content.vb: Public Function EnableEffect(Of T As StatusEffectBase)(duration As Single = 0F, addDuration As Boolean = False) As T
  overload: PluginAPI.Core.EffectsManager.EnableEffect*
  nameWithType.vb: EffectsManager.EnableEffect(Of T)(Single, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Core.EffectsManager.EnableEffect(Of T)(System.Single, System.Boolean)
  name.vb: EnableEffect(Of T)(Single, Boolean)
- uid: PluginAPI.Core.EffectsManager.DisableEffect``1
  commentId: M:PluginAPI.Core.EffectsManager.DisableEffect``1
  id: DisableEffect``1
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: DisableEffect<T>()
  nameWithType: EffectsManager.DisableEffect<T>()
  fullName: PluginAPI.Core.EffectsManager.DisableEffect<T>()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: DisableEffect
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 58
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nDisables a specific <xref href=\"CustomPlayerEffects.StatusEffectBase?text=status+effect\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"PluginAPI.Core.Player\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public T DisableEffect<T>()
          where T : StatusEffectBase
    typeParameters:
    - id: T
      description: The specified effect that will be looked for.
    return:
      type: '{T}'
      description: The <xref href="CustomPlayerEffects.StatusEffectBase" data-throw-if-not-resolved="false"></xref> instance of <code data-dev-comment-type="typeparamref" class="typeparamref">T</code>, otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>.
    content.vb: Public Function DisableEffect(Of T As StatusEffectBase) As T
  overload: PluginAPI.Core.EffectsManager.DisableEffect*
  nameWithType.vb: EffectsManager.DisableEffect(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Core.EffectsManager.DisableEffect(Of T)()
  name.vb: DisableEffect(Of T)()
- uid: PluginAPI.Core.EffectsManager.GetEffect``1
  commentId: M:PluginAPI.Core.EffectsManager.GetEffect``1
  id: GetEffect``1
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: GetEffect<T>()
  nameWithType: EffectsManager.GetEffect<T>()
  fullName: PluginAPI.Core.EffectsManager.GetEffect<T>()
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: GetEffect
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 66
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nGets a specific <xref href=\"CustomPlayerEffects.StatusEffectBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public T GetEffect<T>()
          where T : StatusEffectBase
    typeParameters:
    - id: T
      description: The specified effect that will be looked for.
    return:
      type: '{T}'
      description: The <xref href="CustomPlayerEffects.StatusEffectBase" data-throw-if-not-resolved="false"></xref> instance of <code data-dev-comment-type="typeparamref" class="typeparamref">T</code>, otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>.
    content.vb: Public Function GetEffect(Of T As StatusEffectBase) As T
  overload: PluginAPI.Core.EffectsManager.GetEffect*
  nameWithType.vb: EffectsManager.GetEffect(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Core.EffectsManager.GetEffect(Of T)()
  name.vb: GetEffect(Of T)()
- uid: PluginAPI.Core.EffectsManager.TryGetEffect``1(``0@)
  commentId: M:PluginAPI.Core.EffectsManager.TryGetEffect``1(``0@)
  id: TryGetEffect``1(``0@)
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: TryGetEffect<T>(out T)
  nameWithType: EffectsManager.TryGetEffect<T>(out T)
  fullName: PluginAPI.Core.EffectsManager.TryGetEffect<T>(out T)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TryGetEffect
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 75
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nAttempts to find a <xref href=\"CustomPlayerEffects.StatusEffectBase\" data-throw-if-not-resolved=\"false\"></xref> and safely casts it.\n"
  example: []
  syntax:
    content: >-
      public bool TryGetEffect<T>(out T statusEffect)
          where T : StatusEffectBase
    parameters:
    - id: statusEffect
      type: '{T}'
      description: The found player effect.
    typeParameters:
    - id: T
      description: The specified effect that will be looked for.
    return:
      type: System.Boolean
      description: Whether or not a player effect was found. (And was cast successfully)
    content.vb: Public Function TryGetEffect(Of T As StatusEffectBase)(ByRef statusEffect As T) As Boolean
  overload: PluginAPI.Core.EffectsManager.TryGetEffect*
  nameWithType.vb: EffectsManager.TryGetEffect(Of T)(ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Core.EffectsManager.TryGetEffect(Of T)(ByRef T)
  name.vb: TryGetEffect(Of T)(ByRef T)
- uid: PluginAPI.Core.EffectsManager.TryGetEffect(System.String,CustomPlayerEffects.StatusEffectBase@)
  commentId: M:PluginAPI.Core.EffectsManager.TryGetEffect(System.String,CustomPlayerEffects.StatusEffectBase@)
  id: TryGetEffect(System.String,CustomPlayerEffects.StatusEffectBase@)
  parent: PluginAPI.Core.EffectsManager
  langs:
  - csharp
  - vb
  name: TryGetEffect(String, out StatusEffectBase)
  nameWithType: EffectsManager.TryGetEffect(String, out StatusEffectBase)
  fullName: PluginAPI.Core.EffectsManager.TryGetEffect(System.String, out CustomPlayerEffects.StatusEffectBase)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/EffectsManager.cs
      branch: master
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: TryGetEffect
    path: ../NwPluginAPI/Core/EffectsManager.cs
    startLine: 84
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core
  summary: "\nAttempts to find a <xref href=\"CustomPlayerEffects.StatusEffectBase\" data-throw-if-not-resolved=\"false\"></xref> based on the input string.\n"
  example: []
  syntax:
    content: public bool TryGetEffect(string effectName, out StatusEffectBase statusEffect)
    parameters:
    - id: effectName
      type: System.String
      description: The string that will be used to lookup the effect.
    - id: statusEffect
      type: CustomPlayerEffects.StatusEffectBase
      description: The returned player effect, if any was found. Otherwise it will be null.
    return:
      type: System.Boolean
      description: Whether or not an effect was found.
    content.vb: Public Function TryGetEffect(effectName As String, ByRef statusEffect As StatusEffectBase) As Boolean
  overload: PluginAPI.Core.EffectsManager.TryGetEffect*
  nameWithType.vb: EffectsManager.TryGetEffect(String, ByRef StatusEffectBase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PluginAPI.Core.EffectsManager.TryGetEffect(System.String, ByRef CustomPlayerEffects.StatusEffectBase)
  name.vb: TryGetEffect(String, ByRef StatusEffectBase)
references:
- uid: PluginAPI.Core
  commentId: N:PluginAPI.Core
  name: PluginAPI.Core
  nameWithType: PluginAPI.Core
  fullName: PluginAPI.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PluginAPI.Core.EffectsManager
  commentId: T:PluginAPI.Core.EffectsManager
  parent: PluginAPI.Core
  name: EffectsManager
  nameWithType: EffectsManager
  fullName: PluginAPI.Core.EffectsManager
- uid: PluginAPI.Core.EffectsManager.#ctor*
  commentId: Overload:PluginAPI.Core.EffectsManager.#ctor
  name: EffectsManager
  nameWithType: EffectsManager.EffectsManager
  fullName: PluginAPI.Core.EffectsManager.EffectsManager
- uid: PluginAPI.Core.Player
  commentId: T:PluginAPI.Core.Player
  parent: PluginAPI.Core
  name: Player
  nameWithType: Player
  fullName: PluginAPI.Core.Player
- uid: CustomPlayerEffects.StatusEffectBase
  commentId: T:CustomPlayerEffects.StatusEffectBase
  parent: CustomPlayerEffects
  isExternal: true
  name: StatusEffectBase
  nameWithType: StatusEffectBase
  fullName: CustomPlayerEffects.StatusEffectBase
- uid: PluginAPI.Core.EffectsManager.ChangeState*
  commentId: Overload:PluginAPI.Core.EffectsManager.ChangeState
  name: ChangeState
  nameWithType: EffectsManager.ChangeState
  fullName: PluginAPI.Core.EffectsManager.ChangeState
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: CustomPlayerEffects
  commentId: N:CustomPlayerEffects
  isExternal: true
  name: CustomPlayerEffects
  nameWithType: CustomPlayerEffects
  fullName: CustomPlayerEffects
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PluginAPI.Core.EffectsManager.DisableAllEffects*
  commentId: Overload:PluginAPI.Core.EffectsManager.DisableAllEffects
  name: DisableAllEffects
  nameWithType: EffectsManager.DisableAllEffects
  fullName: PluginAPI.Core.EffectsManager.DisableAllEffects
- uid: PluginAPI.Core.EffectsManager.EnableEffect*
  commentId: Overload:PluginAPI.Core.EffectsManager.EnableEffect
  name: EnableEffect
  nameWithType: EffectsManager.EnableEffect
  fullName: PluginAPI.Core.EffectsManager.EnableEffect
- uid: PluginAPI.Core.EffectsManager.DisableEffect*
  commentId: Overload:PluginAPI.Core.EffectsManager.DisableEffect
  name: DisableEffect
  nameWithType: EffectsManager.DisableEffect
  fullName: PluginAPI.Core.EffectsManager.DisableEffect
- uid: PluginAPI.Core.EffectsManager.GetEffect*
  commentId: Overload:PluginAPI.Core.EffectsManager.GetEffect
  name: GetEffect
  nameWithType: EffectsManager.GetEffect
  fullName: PluginAPI.Core.EffectsManager.GetEffect
- uid: PluginAPI.Core.EffectsManager.TryGetEffect*
  commentId: Overload:PluginAPI.Core.EffectsManager.TryGetEffect
  name: TryGetEffect
  nameWithType: EffectsManager.TryGetEffect
  fullName: PluginAPI.Core.EffectsManager.TryGetEffect
